
'
'	FaceBook Link =>   https://www.facebook.com/profile.php?id=100070215322755
'	
'	Try Hack Me , UserName  => Lime1O1
'
'	
'
'
'
'
'
''

''


############################ Today's , Topic Is All About [ XSS ] ################################################




what is it [ XSS ] : 
	
	Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.

	An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site. These scripts can even rewrite the content of the HTML page. For more details on the different types of XSS flaws, see: Types of Cross-Site Scripting.

	Cross-site scripting (also known as XSS) is a web security vulnerability that allows an attacker to compromise the interactions that users have with a vulnerable application. It allows an attacker to circumvent the same origin policy, which is designed to segregate different websites from each other. Cross-site scripting vulnerabilities normally allow an attacker to masquerade as a victim user, to carry out any actions that the user is able to perform, and to access any of the user's data. If the victim user has privileged access within the application, then the attacker might be able to gain full control over all of the application's functionality and data.

	Cross-site Scripting (XSS) is a client-side code injection attack. The attacker aims to execute malicious scripts in a web browser of the victim by including malicious code in a legitimate web page or web application. The actual attack occurs when the victim visits the web page or web application that executes the malicious code. The web page or web application becomes a vehicle to deliver the malicious script to the user’s browser. Vulnerable vehicles that are commonly used for Cross-site Scripting attacks are forums, message boards, and web pages that allow comments.


	Cross site scripting (XSS) is a common attack vector that injects malicious code into a vulnerable web application. XSS differs from other web attack vectors (e.g., SQL injections), in that it does not directly target the application itself. Instead, the users of the web application are the ones at risk.
	A successful cross site scripting attack can have devastating consequences for an online business’s reputation and its relationship with its clients.
	Depending on the severity of the attack, user accounts may be compromised, Trojan horse programs activated and page content modified, misleading users into willingly surrendering their private data. Finally, session cookies could be revealed, enabling a perpetrator to impersonate valid users and abuse their private accounts.
	Cross site scripting attacks can be broken down into two types: stored and reflected.
	Stored XSS, also known as persistent XSS, is the more damaging of the two. It occurs when a malicious script is injected directly into a vulnerable web application.
	Reflected XSS involves the reflecting of a malicious script off of a web application, onto a user’s browser. The script is embedded into a link, and is only activated once that link is clicked on.

	###################################################################################################################

	What can XSS be used for?
		
		An attacker who exploits a cross-site scripting vulnerability is typically able to:

		1- Impersonate or masquerade as the victim user.
		2- Carry out any action that the user is able to perform.
		3- Read any data that the user is able to access.
		4- Capture the user's login credentials.
		5- Perform virtual defacement of the web site.
		6- Inject trojan functionality into the web site.


	Impact of XSS vulnerabilities : 

		The actual impact of an XSS attack generally depends on the nature of the application, its functionality and data, and the status of the compromised user. For example:

			In a brochureware application, where all users are anonymous and all information is public, the impact will often be minimal.
			In an application holding sensitive data, such as banking transactions, emails, or healthcare records, the impact will usually be serious.
			If the compromised user has elevated privileges within the application, then the impact will generally be critical, allowing the attacker to take full control of the vulnerable application and compromise all users and their data.

	#######################################################################################################################################

  Types of XSS :

  	Stored :  XSS generally occurs when user input is stored on the target server, such as in a database, in a message forum, visitor log, comment field, etc. And then a victim is able to retrieve the stored data from the web application without that data being made safe to render in the browser. With the advent of HTML5, and other browser technologies, we can envision the attack payload being permanently stored in the victim’s browser, such as an HTML5 database, and never being sent to the server at all.
  	Reflected XSS is the simplest variety of cross-site scripting. It arises when an application receives data in an HTTP request and includes that data within the immediate response in an unsafe way.
  	Stored cross-site scripting
	Stored XSS (also known as persistent or second-order XSS) arises when an application receives data from an untrusted source and includes that data within its later HTTP responses in an unsafe way.

	The data in question might be submitted to the application via HTTP requests; for example, comments on a blog post, user nicknames in a chat room, or contact details on a customer order. In other cases, the data might arrive from other untrusted sources; for example, a webmail application displaying messages received over SMTP, a marketing application displaying social media posts, or a network monitoring application displaying packet data from network traffic.

	Here is a simple example of a stored XSS vulnerability. A message board application lets users submit messages, which are displayed to other users:

	<p>Hello, this is my message!</p>

	The application doesn't perform any other processing of the data, so an attacker can easily send a message that attacks other users:

	<p><script>/* Bad stuff here... */</script></p>

  	...., 

	
	

	Reflected :  XSS (AKA Non-Persistent or Type II)
	Reflected XSS occurs when user input is immediately returned by a web application in an error message, search result, or any other response that includes some or all of the input provided by the user as part of the request, without that data being made safe to render in the browser, and without permanently storing the user provided data. In some cases, the user provided data may never even leave the browser (see DOM Based XSS next).

	Here is a simple example of a reflected XSS vulnerability:
	https://insecure-website.com/status?message=All+is+well.
	<p>Status: All is well.</p>
	The application doesn't perform any other processing of the data, so an attacker can easily construct an attack like this:
	https://insecure-website.com/status?message=<script>/*+Bad+stuff+here...+*/</script>
	<p>Status: <script>/* Bad stuff here... */</script></p>
	If the user visits the URL constructed by the attacker, then the attacker's script executes in the user's browser, in the context of that user's session with the application. At that point, the script can carry out any action, and retrieve any data, to which the user has access.




	''''',,

	DOM Based XSS (AKA Type-0) : 
	As defined by Amit Klein, who published the first article about this issue [1], DOM Based XSS is a form of XSS where the entire tainted data flow from source to sink takes place in the browser, i.e., the source of the data is in the DOM, the sink is also in the DOM, and the data flow never leaves the browser. For example, the source (where malicious data is read) could be the URL of the page (e.g., document.location.href), or it could be an element of the HTML, and the sink is a sensitive method call that causes the execution of the malicious data (e.g., document.write).”
	DOM-based cross-site scripting
	DOM-based XSS (also known as DOM XSS) arises when an application contains some client-side JavaScript that processes data from an untrusted source in an unsafe way, usually by writing the data back to the DOM.

	In the following example, an application uses some JavaScript to read the value from an input field and write that value to an element within the HTML:

	var search = document.getElementById('search').value;
	var results = document.getElementById('results');
	results.innerHTML = 'You searched for: ' + search;

	If the attacker can control the value of the input field, they can easily construct a malicious value that causes their own script to execute:

	You searched for: <img src=1 onerror='/* Bad stuff here... */'>

	In a typical case, the input field would be populated from part of the HTTP request, such as a URL query string parameter, allowing the attacker to deliver an attack using a malicious URL, in the same manner as reflected XSS.
	
	#######################################################################################################################################

	How to find and test for XSS vulnerabilities : 


		The vast majority of XSS vulnerabilities can be found quickly and reliably using Burp Suite's web vulnerability scanner.

		Manually testing for reflected and stored XSS normally involves submitting some simple unique input (such as a short alphanumeric string) into every entry point in the application, identifying every location where the submitted input is returned in HTTP responses, and testing each location individually to determine whether suitably crafted input can be used to execute arbitrary JavaScript. In this way, you can determine the context in which the XSS occurs and select a suitable payload to exploit it.

		Manually testing for DOM-based XSS arising from URL parameters involves a similar process: placing some simple unique input in the parameter, using the browser's developer tools to search the DOM for this input, and testing each location to determine whether it is exploitable. However, other types of DOM XSS are harder to detect. To find DOM-based vulnerabilities in non-URL-based input (such as document.cookie) or non-HTML-based sinks (like setTimeout), there is no substitute for reviewing JavaScript code, which can be extremely time-consuming. Burp Suite's web vulnerability scanner combines static and dynamic analysis of JavaScript to reliably automate the detection of DOM-based vulnerabilities.




		Xss Scaners Tools : 

			1- Payloads List : https://github.com/payloadbox/xss-payload-list
			2- Best Xss Scaners Tools : https://awesomeopensource.com/projects/xss-scanner



	#######################################################################################################################################


The article is still in development

	
